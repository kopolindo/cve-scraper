package main

import (
	"flag"
	"fmt"
	"io/ioutil"
	"os"
	"reflect"
	"regexp"
	"strings"
	"text/tabwriter"

	"github.com/alecthomas/template"
	"github.com/jweir/csv"
	"github.com/kopolindo/cve-scraper/db"
	_ "github.com/mattn/go-sqlite3"
)

const banner = `
                                                                            
 ####  #    # ######        ####   ####  #####    ##   #####  ###### #####  
#    # #    # #            #      #    # #    #  #  #  #    # #      #    # 
#      #    # #####  #####  ####  #      #    # #    # #    # #####  #    # 
#      #    # #                 # #      #####  ###### #####  #      #####  
#    #  #  #  #            #    # #    # #   #  #    # #      #      #   #  
 ####    ##   ######        ####   ####  #    # #    # #      ###### #    #   
 
 |Version: {{.Ver}}
 |Commit:  {{.Commit}}
 |Build:   {{.Build}}

`

type Version struct {
	Ver    string
	Build  string
	Commit string
}

var (
	fieldsToPrint []string
	AllowedFields = []string{"Cve", "CveDesc", "Cwe", "CweDesc", "Exploit", "Refs", "Cvssv2", "Cvssv3", "Software", "Version"}

	ActualVersion = Version{"0.1", "Developing", "de9bd41fa1450f6a5bbb667567040615c945c0c6"}
	output        bool
)

//FLAGS
var (
	cve       = flag.String("cve", "", "CVE-ID to look for (at least year in format YYYY and ID number)")
	sw        = flag.String("sw", "", "Software name to look for")
	swVersion = flag.String("swv", "", "Software version (Exact search by default)\n\t~ Generic search (looks for any similar string in the version field)")
	fields    = flag.String("fields", "", "Fields to print, comma separated\n[Cve,CveDesc,Cwe,CweDesc,Exploit,Refs,Cvssv2,Cvssv3,Software,Version]")
	write     = flag.String("write", "", "Output file (csv)")
	version   = flag.Bool("v", false, "Print version and exit")
)

func printbanner() {
	tmpl := template.New("banner")
	template.Must(tmpl.Parse(banner))
	_ = tmpl.Execute(os.Stderr, ActualVersion)
}

func Usage() {
	printbanner()
	fmt.Println("\nUsage flags:")
	flag.PrintDefaults()
	return
}

func Init() {
	flag.Parse()
	if flag.NFlag() == 0 {
		Usage()
		os.Exit(0)
	}
	if *fields != "" {
		fieldsToPrint = validateFields()
	}
	if *fields == "" {
		fieldsToPrint = strings.Split("Cve,CveDesc,Cwe,CweDesc,Exploit,Refs,Cvssv2,Cvssv3,Software,Version", ",")
	}
	if *write != "" {
		if _, err := os.Stat(*write); err == nil {
			fmt.Println("This file exists")
			os.Exit(1)
		}
	}
}

func validateFields() []string {
	var out []string
	checkArray := strings.Split(*fields, ",")
	for _, toCheck := range checkArray {
		for _, allowed := range AllowedFields {
			if allowed == toCheck {
				out = append(out, toCheck)
			}
		}
	}
	return out
}

func validateCve() []string {
	var out []string
	fmt.Println("Validation")
	fmt.Println(strings.Split(*cve, ","))
	for _, cves := range strings.Split(*cve, ",") {
		cveRegexp := regexp.MustCompile("[0-9]+")
		regexpArray := cveRegexp.FindAllString(cves, -1)
		cves = strings.Join(regexpArray, "")
		if len(cves) < 5 {
			fmt.Println("Please, insert at least year (YYYY) and ID number")
			Usage()
			os.Exit(71)
		}
		id := cves[4:]
		cves := strings.Join([]string{"CVE", cves[0:4], id}, "-")
		out = append(out, cves)
	}
	return out
}

func printResults(resArray []db.Results, fields []string) {
	const padding = 2
	w := tabwriter.NewWriter(os.Stdout, 0, 0, padding, ' ', tabwriter.Debug)
	for _, f := range fields {
		fmt.Fprint(w, f, "\t")
	}
	w.Flush()
	fmt.Fprintln(w)
	for _, res := range resArray {
		r := reflect.ValueOf(res)
		for _, f := range fields {
			fmt.Fprint(w, reflect.Indirect(r).FieldByName(f), "\t")
		}
		fmt.Println()
		w.Flush()
	}
}

func writeCsv(resArray []db.Results) {
	if *write != "" {
		csvout, err := csv.Marshal(resArray)
		if err != nil {
			fmt.Println("Error durin marshalling [", err, "]")
		}
		//fmt.Println(string(csvout))
		errWrite := ioutil.WriteFile("out.csv", csvout, 0644)
		if errWrite != nil {
			fmt.Println("Error during writing to file [", err, "]")
		}
	}
}

/************************
*		MAIN FUNCTION		*
************************/

func main() {
	var resArray []db.Results
	var res db.Results
	Init()
	if *cve != "" {
		cve := validateCve()
		for _, c := range cve {
			res = db.CveSearch(c)
			resArray = append(resArray, res)
		}
	}
	if *sw != "" {
		if *swVersion == "" {
			resArray = db.SwSerch(*sw)
		}
		if *swVersion != "" {
			resArray = db.SwVSerch(*sw, *swVersion)
		}
	}
	writeCsv(resArray)
	printResults(resArray, fieldsToPrint)
}
