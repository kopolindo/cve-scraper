package main

import (
	"flag"
	"fmt"
	"os"
	"regexp"
	"strings"

	"github.com/alecthomas/template"
	"github.com/kopolindo/cve-scraper/db"
	_ "github.com/mattn/go-sqlite3"
)

const banner = `
                                                                            
 ####  #    # ######        ####   ####  #####    ##   #####  ###### #####  
#    # #    # #            #      #    # #    #  #  #  #    # #      #    # 
#      #    # #####  #####  ####  #      #    # #    # #    # #####  #    # 
#      #    # #                 # #      #####  ###### #####  #      #####  
#    #  #  #  #            #    # #    # #   #  #    # #      #      #   #  
 ####    ##   ######        ####   ####  #    # #    # #      ###### #    #   
 
 |Version: {{.Ver}}
 |Commit:  {{.Commit}}
 |Build:   {{.Build}}

`

type Version struct {
	Ver    string
	Build  string
	Commit string
}

var ActualVersion = Version{"0.1", "Developing", "de9bd41fa1450f6a5bbb667567040615c945c0c6"}

//FLAGS
var (
	cve       = flag.String("cve", "", "CVE-ID to look for (at least year in format YYYY and ID number)")
	sw        = flag.String("sw", "", "Software name to look for")
	swVersion = flag.String("swv", "", "Software version")
	version   = flag.Bool("v", false, "Print version and exit")
)

func printbanner() {
	tmpl := template.New("banner")
	template.Must(tmpl.Parse(banner))
	_ = tmpl.Execute(os.Stderr, ActualVersion)
}

func Usage() {
	printbanner()
	fmt.Println("\nUsage flags:")
	flag.PrintDefaults()
	return
}

func Init() {
	flag.Parse()
	if flag.NFlag() == 0 {
		Usage()
		os.Exit(0)
	}
}

func validateCve() string {
	cveRegexp := regexp.MustCompile("[0-9]+")
	regexpArray := cveRegexp.FindAllString(*cve, -1)
	cve := strings.Join(regexpArray, "")
	if len(cve) < 5 {
		fmt.Println("Please, insert at least year (YYYY) and ID number")
		Usage()
		os.Exit(71)
	}
	id := cve[4:]
	return strings.Join([]string{"CVE", cve[0:4], id}, "-")
}

func validateVersion() string {
	verRegexp := regexp.MustCompile("[0-9.,]+")
	regexpArray := verRegexp.FindAllString(*swVersion, -1)
	swVersion := strings.Join(regexpArray, "")
	if len(swVersion) < 0 {
		fmt.Println("Please, insert a version number")
		Usage()
		os.Exit(71)
	}
	return swVersion
	/*id := cve[4:]
	return strings.Join([]string{"CVE", cve[0:4], id}, "-")*/
}

/************************
*		MAIN FUNCTION		*
************************/

func main() {
	Init()
	if *cve != "" {
		cve := validateCve()
		db.CveSearch(cve)
		return
	}
	if *sw != "" {
		if *swVersion == "" {
			db.SwSerch(*sw)
			os.Exit(0)
		}
		swVersion := validateVersion()
		fmt.Println(swVersion)
		//db.SwVSerch(*sw, *swVersion)
		return
	}
}
