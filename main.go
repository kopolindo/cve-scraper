package main

import (
	"flag"
	"strings"

	"github.com/kopolindo/cve-scraper/db"
	_ "github.com/mattn/go-sqlite3"
)

const banner = `
                                                                            
 ####  #    # ######        ####   ####  #####    ##   #####  ###### #####  
#    # #    # #            #      #    # #    #  #  #  #    # #      #    # 
#      #    # #####  #####  ####  #      #    # #    # #    # #####  #    # 
#      #    # #                 # #      #####  ###### #####  #      #####  
#    #  #  #  #            #    # #    # #   #  #    # #      #      #   #  
 ####    ##   ######        ####   ####  #    # #    # #      ###### #    #   
 
 |Version: {{.Ver}}
 |Commit:  {{.Commit}}
 |Build:   {{.Build}}

`

type Version struct {
	Ver    string
	Build  string
	Commit string
}

var (
	fieldsToPrint []string
	AllowedFields = []string{"Cve", "CveDesc", "Cwe", "CweDesc", "Exploit", "Refs", "Cvssv2", "Cvssv3", "Software", "Version"}

	ActualVersion = Version{"0.1", "Developing", "de9bd41fa1450f6a5bbb667567040615c945c0c6"}
	output        bool
	//FLAGS
	cve       = flag.String("cve", "", "CVE-ID to look for (at least year in format YYYY and ID number)")
	sw        = flag.String("sw", "", "Software name to look for")
	swVersion = flag.String("swv", "", "Software version (Exact search by default)\n\t~ Generic search (looks for any similar string in the version field)")
	fields    = flag.String("fields", "", "Fields to print, comma separated\n[Cve,CveDesc,Cwe,CweDesc,Exploit,Refs,Cvssv2,Cvssv3,Software,Version]")
	write     = flag.String("write", "", "Output file (csv)")
	header    = flag.Bool("header", false, "Print header: false by default. If CSV output desired header is true by default")
	version   = flag.Bool("version", false, "Print version and exit")
)

/************************
*		MAIN FUNCTION		*
************************/

func main() {
	var (
		resArray []db.Results
		res      db.Results
		count    int = 0
	)
	Init()
	if *cve != "" {
		cve := ValidateCve()
		for _, c := range cve {
			i := 0
			res, i = db.CveSearch(c)
			if i != 0 {
				resArray = append(resArray, res)
				count += i
			}
		}
	}
	if *sw != "" {
		if *swVersion == "" {
			for _, singleSw := range strings.Split(*sw, ",") {
				tmp := db.SwSearch(singleSw)
				for _, element := range tmp {
					resArray = append(resArray, element)
				}
			}
		}
		if *swVersion != "" {
			for _, singleSw := range strings.Split(*sw, ",") {
				tmp := db.SwVSearch(singleSw, *swVersion)
				for _, element := range tmp {
					resArray = append(resArray, element)
				}
			}
		}
	}
	WriteCsv(resArray)
	PrintResults(resArray, fieldsToPrint)
}
